dependencies {
  implementation project(":cats:cats-core")
  implementation project(":clouddriver-api")
  implementation project(":clouddriver-core")
  implementation project(":clouddriver-security")

  compileOnly "org.projectlombok:lombok"
  annotationProcessor "org.projectlombok:lombok"
  testAnnotationProcessor "org.projectlombok:lombok"

  implementation "com.github.ben-manes.caffeine:guava"
  implementation "com.netflix.frigga:frigga:0.26.0"
  implementation "com.netflix.spectator:spectator-api:1.5.3"
  implementation "io.spinnaker.fiat:fiat-api:$fiatVersion"
  implementation "io.spinnaker.fiat:fiat-core:$fiatVersion"
  implementation "io.spinnaker.kork:kork-moniker"
  implementation "com.oracle.oci.sdk:oci-java-sdk-core"
  implementation "com.oracle.oci.sdk:oci-java-sdk-identity"
  implementation "com.oracle.oci.sdk:oci-java-sdk-loadbalancer"
  implementation "com.oracle.oci.sdk:oci-java-sdk-objectstorage"
  implementation "org.apache.groovy:groovy:4.0.9"
  implementation "org.springframework.boot:spring-boot-starter-actuator"
  implementation "org.springframework.boot:spring-boot-starter-web"

  testImplementation "cglib:cglib-nodep:3.3.0"
  testImplementation "org.codehaus.groovy:groovy-console:3.0.17"
  testImplementation "org.objenesis:objenesis:2.5.1"
  testImplementation "org.spockframework:spock-core:2.4-M1-groovy-4.0"
  testImplementation "org.spockframework:spock-spring"
  testImplementation "org.springframework:spring-test"
}

def allSourceSets = sourceSets

def licenseExtension = project.extensions.findByName('license')
if (licenseExtension != null) {
  licenseExtension.header project.file('oracle-source-header')
  licenseExtension.includes(["**/*.groovy", "**/*.java", "**/*.properties"])
  licenseExtension.strictCheck true
  licenseExtension.skipExistingHeaders false
  licenseExtension.sourceSets = allSourceSets
}
